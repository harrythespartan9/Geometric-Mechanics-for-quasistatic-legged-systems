function stanceSpace = simulateSineSubgaits(params, stanceSpace)
%SIMULATESINESUBGAITS siumulate the sinusoidal subgaits defined in the
%stance subspace struct and return the displacements and gait average
%velocities generated by each subgait

    % unpack params and functions needed to simulate the system
    na = params.na; nl = params.nl; nalpha_b = params.nalpha_b;
    load("Data\Sinusoidal Gaits\gCircFxns.mat", 'fgCirc');

    % iterate over each stance phase and simulate the system
    nStance = 2;
    z  = cell(1, nStance); gCA  = cell(1, nStance); k = cell(1, nStance);
    zh = cell(1, nStance); gCAh = cell(1, nStance); n = nan(1, nStance);
    for s = 1:nStance
        
        % unpack the current subgait params
        switch s
            case 1
                t0 = 0; tf = 0.5;
            case 2
                t0 = 0.5; tf = 1;
        end
        fBodyVel = fgCirc{s};
        a1 = stanceSpace.amplitude{1};
            a2 = stanceSpace.amplitude{2};
        p1 = stanceSpace.phase{1};
            p2 = stanceSpace.phase{2};
        b1 = stanceSpace.bias{1};
            b2 = stanceSpace.bias{2};
        numPts = size(a1, 1);

        % compute the SE(2) body displacement in the current stance phase
        % ... we assume body position at the origin for both stance phases
        % ... to keep the sets distinct
        zb = nan(numPts, 3);
        for i = 1:numPts
            % ... simulate
            [~, yNow] = ode45( ...
                @(t, y) rot_SE2(y(3))* ... % body vel into rest frame
                    fBodyVel(t, na, nl, nalpha_b, ... % body vel
                        a1(i), a2(i), p1(i), p2(i), b1(i), b2(i)), ...
                        [t0, tf], zeros(1, 3) ... % int time and zero IC
                                );
            % ... extract the net displacement of the system
            zb(i, :) = yNow(end, :);
        end

        % now, we apply the log map vectorially to obtain a column array of
        % average stance phase velocities
        gbCircAvg = logMapOfALieGroupElement( zb );

        % obtain the convex hull of the stance subgait average body
        % velocities
        % ... the last argument is the shrink factor and it is set to zero
        % ... to extract the convex hull
        % boundsIdx = boundary( ...
        %     gbCircAvg(:, 1), gbCircAvg(:, 2), gbCircAvg(:, 3), ...
        %                         0);
        boundsIdx = convhull( ...
            gbCircAvg(:, 1), gbCircAvg(:, 2), gbCircAvg(:, 3) ...
                                );

        % extract and sort the points in the convex hull to extract a
        % smaller displacement and gait average velocity set
        idxHull = boundsIdx(:); % do not need the exact triangle ordering
        zHull = zb(idxHull, :); gbCircAvgHull = gbCircAvg(idxHull, :);

        % save the data for this stance phase
        z{s} = zb; gCA{s} = gbCircAvg; k{s} = boundsIdx;
        zh{s} = zHull; gCAh{s} = gbCircAvgHull;
        n(s) = numel(idxHull);

    end

    % pack into struct and return
    stanceSpace.z = z; 
    stanceSpace.gCA = gCA;
    stanceSpace.k = k;
    stanceSpace.zh = zh;
    stanceSpace.gCAh = gCAh;
    stanceSpace.n = n;

end

